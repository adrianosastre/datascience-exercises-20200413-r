library(lubridate)
library(gapminder)
library(fpp2)
library(seasonal)
library(dplyr)
install.packages("dplyr")
video_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-07-30/video_games.csv")
# Alterando release date para Date:
video_games$release_date = as.Date(video_games$release_date, "%b %d, %Y")
class(video_games$release_date)
# Adicionando campo ano:
years = substring(c(video_games$release_date),0,4)
video_games <- mutate(video_games, release_year = years)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = tail(strsplit(video_games$owners,split=" ")[[1]],1))
x
View(x)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = tail(strsplit(video_games$owners,split=" ")))
mutate(video_games, max_owners = tail(strsplit(video_games$owners,split=" ")))
tail(strsplit(video_games$owners,split=" "))
View(video_games)
View(video_games)
(strsplit(video_games$owners,split=" ")
strsplit(video_games$owners,split=" ")
strsplit(video_games$owners,split=" ")
strsplit(video_games$owners,split="..")
strsplit(video_games$owners,split=" .. ")
strsplit(video_games$owners,split=" .. ")
word(video_games$owners, -1)
word(video_games$owners, -1, sep = fixed(' .. '))
word(video_games$owners[1], -1, sep = fixed(' .. '))
word(video_games$owners[1], -1, sep = fixed('..'))
word(video_games$owners[1], -1, sep = fixed(' '))
word(video_games$owners[1], -1, sep = fixed('..'))
word(video_games$owners, -1, sep = fixed('..'))
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = word(video_games$owners, -1, sep = fixed('..')))
word(video_games$owners, -1, sep = fixed('..'))
View(x)
x$max_owners = as.numeric(x$max_owners)
View(x)
View(x)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = word(video_games$owners, -1, sep = fixed('..')))
x <- mutate(x, max_owners = word(video_games$owners, -1, sep = fixed(' ')))
View(x)
View(x)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = word(video_games$owners, -1, sep = fixed('..')))
x <- mutate(x, max_owners = word(video_games$max_owners, -1, sep = fixed(' ')))
x <- mutate(x, max_owners = word(x$max_owners, -1, sep = fixed(' ')))
View(x)
View(x)
x
x$max_owners
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = trim(word(video_games$owners, -1, sep = fixed('..'))))
install.packages("gdata")
library(gdata)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = trim(word(video_games$owners, -1, sep = fixed('..'))))
View(x)
View(x)
x <- mutate(x, max_owners = word(x$max_owners, -1, sep = fixed(' ')))
glimpse(x)
glimpse(x)
glimpse(x)
x$max_owners = as.numeric(x$max_owners)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = trim(word(video_games$owners, -1, sep = fixed('..'))))
x <- mutate(x, max_owners = str_replace_all(x$max_owners, ".", ""))
View(x)
View(x)
# Adicionando campo máximo de owners:
x <- mutate(video_games, max_owners = trim(word(video_games$owners, -1, sep = fixed('..'))))
x <- mutate(x, max_owners = str_replace_all(x$max_owners, "[,]", ""))
glimpse(x)
x$max_owners = as.numeric(x$max_owners)
x$max_owners = as.numeric(x$max_owners)
glimpse(x)
video_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-07-30/video_games.csv")
# Alterando release date para Date:
video_games$release_date = as.Date(video_games$release_date, "%b %d, %Y")
class(video_games$release_date)
# Adicionando campo ano:
years = substring(c(video_games$release_date),0,4)
video_games <- mutate(video_games, release_year = years)
# Adicionando campo máximo de owners, numérico:
video_games <- mutate(video_games, max_owners = trim(word(video_games$owners, -1, sep = fixed('..'))))
video_games <- mutate(video_games, max_owners = str_replace_all(video_games$max_owners, "[,]", ""))
video_games$max_owners = as.numeric(video_games$max_owners)
glimpse(video_games)
video_games_by_publisher <- video_games %>%
group_by(publisher) %>%
summarise(price = mean(price, na.rm = TRUE),
metascore = mean(metascore, na.rm = TRUE),
max_owners = mean(max_owners, na.rm = TRUE)
) %>%
ungroup()
glimpse(video_games_by_publisher)
video_games_by_year <- video_games %>%
group_by(release_year) %>%
summarise(price = mean(price, na.rm = TRUE),
metascore = mean(metascore, na.rm = TRUE),
max_owners = mean(max_owners, na.rm = TRUE)
) %>%
ungroup()
glimpse(video_games_by_year)
chart_1 <- video_games_by_publisher %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = publisher, y = max_owners)) +
geom_line()
plotly::ggplotly(chart_1)
chart_2 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = max_owners)) +
geom_line()
plotly::ggplotly(chart_2)
chart_2
chart_3 <- video_games_by_publisher %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = publisher)) +
geom_bar()
plotly::ggplotly(chart_3)
chart_4 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = metascore)) +
geom_col()
plotly::ggplotly(chart_4)
chart_3 <- video_games_by_publisher %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = publisher, y = metascore)) +
geom_col()
plotly::ggplotly(chart_3)
video_games_by_publisher <- video_games %>%
group_by(publisher) %>%
summarise(price = mean(price, na.rm = TRUE),
metascore = mean(metascore, na.rm = TRUE),
max_owners = mean(max_owners, na.rm = TRUE)
) %>%
ungroup()
glimpse(video_games_by_publisher)
video_games_by_year <- video_games %>%
group_by(release_year) %>%
summarise(price = mean(price, na.rm = TRUE),
metascore = mean(metascore, na.rm = TRUE),
max_owners = mean(max_owners, na.rm = TRUE)
) %>%
ungroup()
glimpse(video_games_by_year)
# Removendo NA:
video_games_by_publisher <- na.omit(video_games_by_publisher)
glimpse(video_games_by_publisher)
chart_1 <- video_games_by_publisher %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = publisher, y = max_owners)) +
geom_line()
plotly::ggplotly(chart_1)
chart_2 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = max_owners)) +
geom_line()
chart_2
chart_3 <- video_games_by_publisher %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = publisher, y = metascore)) +
geom_col()
plotly::ggplotly(chart_3)
View(video_games_by_publisher)
View(video_games_by_publisher)
View(video_games_by_year)
View(video_games_by_year)
chart_4 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = max_owners)) +
geom_col()
plotly::ggplotly(chart_4)
chart_4 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = price)) +
geom_col()
plotly::ggplotly(chart_4)
View(video_games)
View(video_games)
# Removendo NA:
video_games <- na.omit(video_games)
# Selecionando algumas colunas para taxa de variação (número índice):
video_games_tv <- video_games %>% select(
number,
price,
metascore,
max_owners
)
#View(video_games_tv)
video_games_tv$price[1] <-  100;
for(i in 2:length(video_games_tv$price)){
video_games_tv$price[i] <-  (1 + video_games$price[i]/100) * video_games_tv$price[i-1]
}
video_games_tv$metascore[1] <-  100;
for(i in 2:length(video_games_tv$metascore)){
video_games_tv$metascore[i] <-  (1 + video_games$metascore[i]/100) * video_games_tv$metascore[i-1]
}
video_games_tv$max_owners[1] <-  100;
for(i in 2:length(video_games_tv$max_owners)){
video_games_tv$max_owners[i] <-  (1 + video_games$max_owners[i]/100) * video_games_tv$max_owners[i-1]
}
video_games_tv_cor <- cor(video_games_tv %>% select(-"number")) %>% round(2)
print(video_games_tv_cor)
corrplot::corrplot(video_games_tv_cor, type = "upper", tl.col = "black")
install.packages("tidyverse")
install.packages("corrplot")
install.packages("janitor")
install.packages("lubridate")
install.packages("gapminder")
install.packages("fpp2")
install.packages("seasonal")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("gdata")
library(tidyverse)
library(corrplot)
library(janitor)
library(lubridate)
library(gapminder)
library(fpp2)
library(seasonal)
library(dplyr)
library(gdata)
video_games <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-07-30/video_games.csv")
head(video_games)
tail(video_games)
str(video_games)
glimpse(video_games)
summary(video_games)
# Alterando release date para Date:
video_games$release_date = as.Date(video_games$release_date, "%b %d, %Y")
class(video_games$release_date)
# Adicionando campo ano:
years = substring(c(video_games$release_date),0,4)
video_games <- mutate(video_games, release_year = years)
# Adicionando campo máximo de owners, numérico:
video_games <- mutate(video_games, max_owners = trim(word(video_games$owners, -1, sep = fixed('..'))))
video_games <- mutate(video_games, max_owners = str_replace_all(video_games$max_owners, "[,]", ""))
video_games$max_owners = as.numeric(video_games$max_owners)
glimpse(video_games)
video_games_by_publisher <- video_games %>%
group_by(publisher) %>%
summarise(price = mean(price, na.rm = TRUE),
metascore = mean(metascore, na.rm = TRUE),
max_owners = mean(max_owners, na.rm = TRUE)
) %>%
ungroup()
# Removendo NA:
video_games_by_publisher <- na.omit(video_games_by_publisher)
glimpse(video_games_by_publisher)
video_games_by_year <- video_games %>%
group_by(release_year) %>%
summarise(price = mean(price, na.rm = TRUE),
metascore = mean(metascore, na.rm = TRUE),
max_owners = mean(max_owners, na.rm = TRUE)
) %>%
ungroup()
glimpse(video_games_by_year)
chart_3 <- video_games_by_publisher %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = publisher, y = metascore)) +
geom_col()
plotly::ggplotly(chart_3)
chart_4 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = metascore)) +
geom_col()
plotly::ggplotly(chart_4)
chart_4 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = max_owners)) +
geom_col()
plotly::ggplotly(chart_4)
chart_4 <- video_games_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = release_year, y = price)) +
geom_col()
plotly::ggplotly(chart_4)
# Removendo NA:
video_games <- na.omit(video_games)
# Selecionando algumas colunas para taxa de variação (número índice):
video_games_tv <- video_games %>% select(
number,
price,
metascore,
max_owners
)
#View(video_games_tv)
video_games_tv$price[1] <-  100;
for(i in 2:length(video_games_tv$price)){
video_games_tv$price[i] <-  (1 + video_games$price[i]/100) * video_games_tv$price[i-1]
}
video_games_tv$metascore[1] <-  100;
for(i in 2:length(video_games_tv$metascore)){
video_games_tv$metascore[i] <-  (1 + video_games$metascore[i]/100) * video_games_tv$metascore[i-1]
}
video_games_tv$max_owners[1] <-  100;
for(i in 2:length(video_games_tv$max_owners)){
video_games_tv$max_owners[i] <-  (1 + video_games$max_owners[i]/100) * video_games_tv$max_owners[i-1]
}
video_games_tv_cor <- cor(video_games_tv %>% select(-"number")) %>% round(2)
print(video_games_tv_cor)
corrplot::corrplot(video_games_tv_cor, type = "upper", tl.col = "black")
library(tidyverse)
library(corrplot)
library(janitor)
library(lubridate)
library(gapminder)
library(fpp2)
library(seasonal)
library(dplyr)
spotify_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
head(spotify_songs)
tail(spotify_songs)
str(spotify_songs)
glimpse(spotify_songs)
summary(spotify_songs)
# Alterando release date para Date:
spotify_songs$track_album_release_date = lubridate::ymd(spotify_songs$track_album_release_date)
class(spotify_songs$track_album_release_date)
# Adicionando campo ano:
years = substring(c(spotify_songs$track_album_release_date),0,4)
spotify_songs <- mutate(spotify_songs, track_album_year = years)
# Removendo NA:
spotify_songs <- na.omit(spotify_songs)
# Removendo valores 0:
spotify_songs <- filter(
spotify_songs,
track_popularity != 0,
danceability != 0,
energy != 0
)
glimpse(spotify_songs)
spotify_songs_by_genre <- spotify_songs %>%
group_by(playlist_genre, track_album_release_date) %>%
summarise(track_popularity = sum(track_popularity, na.rm = TRUE),
danceability = mean(danceability, na.rm = TRUE),
energy = mean(energy, na.rm = TRUE)) %>%
ungroup()
glimpse(spotify_songs_by_genre)
## Nesting (agrupando) por gênero:
spotify_songs_by_genre_nested <- spotify_songs_by_genre %>%
group_by(playlist_genre) %>%
nest()
glimpse(spotify_songs_by_genre_nested)
spotify_songs_by_year <- spotify_songs %>%
group_by(playlist_genre, track_album_year) %>%
summarise(track_popularity = sum(track_popularity, na.rm = TRUE),
danceability = mean(danceability, na.rm = TRUE),
energy = mean(energy, na.rm = TRUE)) %>%
ungroup()
glimpse(spotify_songs_by_year)
## Nesting (agrupando) por gênero:
spotify_songs_by_year_nested <- spotify_songs_by_year %>%
group_by(track_album_year) %>%
nest()
glimpse(spotify_songs_by_year)
chart_1 <- spotify_songs_by_genre %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = playlist_genre, y = track_popularity)) +
geom_line()
plotly::ggplotly(chart_1)
chart_2 <- spotify_songs_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = track_album_year, y = track_popularity)) +
geom_line()
plotly::ggplotly(chart_2)
chart_3 <- spotify_songs_by_genre %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = playlist_genre)) +
geom_bar()
plotly::ggplotly(chart_3)
chart_4 <- spotify_songs_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = track_album_year, y = danceability)) +
geom_col()
plotly::ggplotly(chart_4)
chart_5 <- spotify_songs_by_year %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = track_album_year, y = energy)) +
geom_col()
plotly::ggplotly(chart_5)
chart_6 <- spotify_songs_by_genre %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = energy, y = track_popularity)) +
geom_line()
#chart_spotify_songs_by_genre
plotly::ggplotly(chart_6)
chart_7 <- spotify_songs_by_genre %>%
#filter(playlist_genre == "rock") %>%
ggplot(aes(x = danceability, y = track_popularity)) +
geom_line()
#chart_spotify_songs_by_genre
plotly::ggplotly(chart_7)
chart_8 <- spotify_songs_by_year %>%
ggplot(aes(x = playlist_genre, y = danceability)) +
geom_point() +
theme(legend.position = "bottom")
plotly::ggplotly(chart_8)
chart_9 <- spotify_songs_by_year %>%
ggplot(aes(x = playlist_genre, y = energy)) +
geom_point() +
theme(legend.position = "bottom")
#chart_spotify_songs_by_genre
plotly::ggplotly(chart_9)
chart_10 <- spotify_songs_by_year %>%
ggplot(aes(x = track_album_year, y = track_popularity)) +
geom_point() +
theme(legend.position = "bottom")
#chart_spotify_songs_by_genre
plotly::ggplotly(chart_10)
chart_11 <- spotify_songs_by_year %>%
ggplot(aes(x = playlist_genre, y = track_popularity)) +
geom_point() +
theme(legend.position = "bottom")
#chart_spotify_songs_by_genre
plotly::ggplotly(chart_11)
# Selecionando algumas colunas para taxa de variação (número índice):
spotify_songs_tv <- spotify_songs %>% select(
track_id,
track_popularity,
danceability,
energy
)
#View(spotify_songs_tv)
spotify_songs_tv$track_popularity[1] <-  100;
for(i in 2:length(spotify_songs_tv$track_popularity)){
spotify_songs_tv$track_popularity[i] <-  (1 + spotify_songs$track_popularity[i]/100) * spotify_songs_tv$track_popularity[i-1]
}
spotify_songs_tv$danceability[1] <-  100;
for(i in 2:length(spotify_songs_tv$danceability)){
spotify_songs_tv$danceability[i] <-  (1 + spotify_songs$danceability[i]/100) * spotify_songs_tv$danceability[i-1]
}
spotify_songs_tv$energy[1] <-  100;
for(i in 2:length(spotify_songs_tv$energy)){
spotify_songs_tv$energy[i] <-  (1 + spotify_songs$energy[i]/100) * spotify_songs_tv$energy[i-1]
}
spotify_songs_tv_cor <- cor(spotify_songs_tv %>% select(-"track_id")) %>% round(2)
print(spotify_songs_tv_cor)
corrplot::corrplot(spotify_songs_tv_cor, type = "upper", tl.col = "black")
library(tidyverse)
library(corrplot)
library(janitor)
library(lubridate)
library(gapminder)
library(fpp2)
library(seasonal)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
retail_data = readxl::read_excel("./retail.xlsx", skip = 1)
retail_data = janitor::clean_names(retail_data)
View(retail_data)
retail_data$series_id = lubridate::ymd(retail_data$series_id)
class(retail_data$series_id)
# a3349396w = Turnover ;  Total (State) ;  Total (Industry) ;
# first date = 1982-04-01
retail_data_total_ts <- ts(retail_data$a3349396w, start = c(1982, 1), frequency = 12)
class(retail_data_total_ts)
# a3349396w = Turnover ;  Total (State) ;  Total (Industry) ;
seasonplot(
x = retail_data_total_ts,
season.labels = NULL,
year.labels = FALSE,
year.labels.left = FALSE,
type = "o",
xlab = NULL,
ylab = "",
col = 1,
labelgap = 0.1
)
ggseasonplot(
x = retail_data_total_ts,
season.labels = NULL,
year.labels = FALSE,
year.labels.left = FALSE,
type = NULL,
col = NULL,
continuous = TRUE,
polar = FALSE,
labelgap = 0.04
)
ggseasonplot(
x = retail_data_total_ts,
season.labels = NULL,
year.labels = FALSE,
year.labels.left = FALSE,
type = NULL,
col = NULL,
continuous = TRUE,
polar = TRUE,
)
ggmonthplot(
x = retail_data_total_ts
)
fit_x11 <- retail_data_total_ts %>% seas(x11="")
autoplot(fit_x11) +
ggtitle("Total Turnover")
autoplot(elecequip, series="Data") +
autolayer(trendcycle(fit_x11), series="Trend") +
autolayer(seasadj(fit_x11), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Total Turnover") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
